#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")
#@ load("utils.star", "utils")

#@ def cpu(n):
#@   return str(n)+"m"
#@ end

#@ def memory(n):
#@   return "{}Mi".format(n)
#@ end

#@ def getDeploy():
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ utils.deployName()
  labels: #@ utils.defaultLabels("deploy")
  namespace: #@ utils.namespaceName()
spec:
  replicas: #@ int(data.values.baseReplicas * data.values.releaseFactorReplicas) if utils.isRelease() else int(data.values.baseReplicas)
  revisionHistoryLimit: #@ 4 if utils.isRelease() else 2
  selector:
    matchLabels: #@ utils.defaultLabels("pod")
  template:
    metadata:
      labels: #@ utils.defaultLabels("pod")
    spec:
      #@ if data.values.volumes:
      volumes:
      #@   for volume in data.values.volumes:
        - #@ {"name": volume.name, "persistentVolumeClaim": volume.persistentVolumeClaim}
      #@   end
      #@ end
      containers:
        - image: #@ utils.imageName()
          imagePullPolicy: Always
          name: app
          envFrom:
            - configMapRef:
                name: #@ utils.defaultConfigMapName()
            #@ if data.values.additionalDeployEnvSources:
            #@   for envSource in data.values.additionalDeployEnvSources:
            - #@ utils.recursiveLookupForStringAndReplace(envSource, "##ENVIRONMENT", data.values.environment)
            #@   end
            #@ end
          #@ if data.values.additionalDeployEnv:
          env:
            #@   for env in data.values.additionalDeployEnv:
            - #@ utils.recursiveLookupForStringAndReplace(env, "##ENVIRONMENT", data.values.environment)
            #@   end
          #@ end
          ports:
            - containerPort: 8080
              name: main-http
          #@ if data.values.volumes:
          securityContext:
            privileged: true
          volumeMounts:
          #@   for volume in data.values.volumes:
            - #@ {"name": volume.name, "mountPath": volume.mountPath}
          #@   end
          #@ end
          readinessProbe:
            httpGet:
              path: #@ data.values.healthcheckPath
              port: 8080
              scheme: HTTP
            initialDelaySeconds: #@ data.values.initialDelaySeconds
            failureThreshold: #@ data.values.failureThreshold
            timeoutSeconds: #@ data.values.timeoutSeconds
            periodSeconds: #@ data.values.periodSeconds
          resources:
            requests:
              memory: #@ memory(data.values.baseRAMRequest * data.values.releaseFactorRAMRequest) if utils.isRelease() else memory(data.values.baseRAMRequest)
              cpu: #@ cpu(data.values.baseCPURequest * data.values.releaseFactorCPURequest) if utils.isRelease() else cpu(data.values.baseCPURequest)
            limits:
              memory: #@ memory(data.values.baseRAMLimit * data.values.releaseFactorRAMLimit) if utils.isRelease() else memory(data.values.baseRAMLimit)
              cpu: #@ cpu(data.values.baseCPULimit * data.values.releaseFactorCPULimit) if utils.isRelease() else cpu(data.values.baseCPULimit)
      #@ if/end data.values.podAdditionalConfig:
      _: #@ template.replace(data.values.podAdditionalConfig)
      #@ if/end data.values.podAdditionalConfigByEnvironment and data.values.podAdditionalConfigByEnvironment[data.values.environment]:
      _: #@ template.replace(data.values.podAdditionalConfigByEnvironment[data.values.environment])
#@ end